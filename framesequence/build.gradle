apply plugin: 'com.android.library'

dependencies {
    compileOnly "androidx.annotation:annotation:${ANDROIDX_VERSION}"
    implementation("com.github.bumptech.glide:glide:${GLIDE_VERSION}"){
        exclude group:"com.android.support"
    }
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
    compileOnly "androidx.fragment:fragment:${ANDROIDX_VERSION}"
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int

        ndk {
            abiFilter "armeabi-v7a"
            abiFilter "arm64-v8a"
            abiFilter "x86"
            abiFilter "x86_64"
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    sourceSets {
        main {
            jni.srcDirs = []
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

task copyLibwebp(type: Copy) {
    def sourceDir = new File(project(':webp_decoder').projectDir, "src/main/jni/libwebp")
    def targetDir = new File(projectDir, "src/main/jni/libwebp")
    targetDir.deleteDir()

    from sourceDir
    into targetDir
    include("**/**.c")
    include("**/**.h")
    include("**.mk")
    include("**/**.rc")
    include("**/**.in")
}

afterEvaluate {
    project.tasks.findAll {
        it.name.startsWith("externalNativeBuild")
    } .each {
        it.dependsOn copyLibwebp
    }
}

apply from: "${rootProject.projectDir}/release-bintray.gradle"
